/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.9.1 - tomw - Added 'notify' GET entrypoint for sending Pushover notifications on demand
0.9.0 - tomw - Compatibility for images stored in File Manager
0.1.0 - tomw - Pre-release version

*/

definition(
    name: "Image Server",
    namespace: "tomw",
    author: "tomw",
    description: "",
    category: "Convenience",
    iconUrl: "",
    iconX2Url: "",
    iconX3Url: "")

preferences
{
    page(name: "entryPage")
    page(name: "webServerPage")
    page(name: "pushoverPage")
}

def uninstalled()
{
    unsubscribe()
}

def entryPage()
{
    enableOauth()
    
    dynamicPage(name: "entryPage", title: "", install: true, uninstall: true)
    {
        section
        {
            href(page: "webServerPage", title: "<b>Select devices to serve images for dashboards and webpages.</b>")
            href(page: "pushoverPage", title: "<b>Select devices to use for Pushover notifications.</b>")
        }
        section
        {
            input name:	"enableLogging", type: "bool", title: "Enable Debug Logging?", defaultValue: false, required: true
        }
    }
}

def linkToMain()
{
    return href(page: "entryPage", title: "<b>Return to main page.</b>")
}

def webServerPage()
{
    dynamicPage(name: "webServerPage", title: "", install: true, uninstall: true)
    {
        section
        {
            input name:	"sourceDevs", type: "capability.*", title: "Select any devices with the 'image' attribute.", multiple: true, required: false, submitOnChange: true
        }
        section
        {
            paragraph("<h2>Use these URLs to access images:</h2>")
            
            for(dev in sourceDevs)
            {
                paragraph("<b>${dev.getName()}:</b>")
                paragraph("<p style='margin-left:10%'>${getFullLocalApiServerUrl() + "/${imagePath}/${dev.getDeviceNetworkId()}?access_token=${token}"}</p>")
            }
            
            paragraph("<b>Single most recent image out of all of the selected devices:</b>")
            paragraph("<p style='margin-left:10%'>${getFullLocalApiServerUrl() + "/${latestPath}?access_token=${token}"}</p>")
        }
        section
        {
            linkToMain()
        }
    }
}

def pushoverPage()
{
    dynamicPage(name: "pushoverPage", title: "", install: true, uninstall: true)
    {
        unsubscribe()
        if(pushoverDevs)
        {
            subscribe(pushoverDevs, "image", "notificationHandler")
        }
        section
        {
            input name:	"poUserKey", type: "text", title: "Pushover User Key", required: false
            input name:	"poApiToken", type: "text", title: "Pushover API Token", required: false
            paragraph("<br>")
            input name:	"pushoverDevs", type: "capability.*", title: "Select devices with 'image' to send notifications from automatically after each 'take' action.", multiple: true, required: false, submitOnChange: true
            paragraph("<br>")
            paragraph("<b>HTTP GET format for on demand notifications:</b> ${getFullLocalApiServerUrl().replace('/apps', ':8080/apps') + "/${notificationPath}/required_DNI_or_name/optional_title/optional_message?access_token=${token}"}")
            input name:	"pushoverDevsOnDemand", type: "capability.*", title: "Select devices with 'image' to send notifications from on demand via HTTP GET as shown above.", multiple: true, required: false, submitOnChange: true            
        }
        
        section
        {
            linkToMain()
        }
    }
}

def logDebug(msg)
{
    if(enableLogging)
    {
        log.debug "${msg}"
    }
}

private void enableOauth()
{
    // Thanks! - https://github.com/imnotbob/autoMower/blob/main/automower-connect.groovy
    Map params=
        [
            uri: "http://localhost:8080/app/edit/update?_action_update=Update&oauthEnabled=true&id=${app.appTypeId}".toString(),
            headers: ['Content-Type':'text/html;charset=utf-8']
        ]
    try
    {
        httpPost(params) {}
    }
    catch (e) {}
}

def getToken()
{
    if(!state.accessToken)
    {
        createAccessToken()
    }
    
    return state.accessToken
}

import groovy.transform.Field
@Field String imagePath = "image"
@Field String latestPath = "latest"
@Field String notificationPath = "notify"

mappings
{
    path("/${imagePath}/:devDniOrName")
    { action: [GET: "serveImage"] }
    
    path("/${latestPath}")
    { action: [GET: "serveLatest"] }
    
    def notifyHandler = [GET: "notifyOnDemand"]
    
    path("/${notificationPath}/:devDniOrName/:title/:message")
    { action: notifyHandler }
    
    path("/${notificationPath}/:devDniOrName/:title")
    { action: notifyHandler }
    
    path("/${notificationPath}/:devDniOrName")
    { action: notifyHandler }
}

def serveImage()
{
    def reqDev = params.devDniOrName
    
    logDebug("Image Server request for ${reqDev}")
    
    try
    {
        def dev = findDevByDniOrName(sourceDevs, params.devDniOrName)
        if(!dev) { throw new Exception("no matching device") }
        
        if(null == dev.currentValue('image'))
        {
            throw new Exception("no image attribute present")
        }
        
        logDebug("Image Server matched ${dev.getName()}") 
        return render(renderImageMap(dev))
    }
    catch (Exception e)
    {
        return render(contentType: "text/html", data: "Image Server: ${e.message}", status: 200) 
    }
}

def serveLatest()
{
    try
    {
        def time = 0
        def latestDev
        
        if(!sourceDevs?.size()) { throw new Exception("no devices selected") }
        
        for(dev in sourceDevs)
        {
            dev.events().each
            {
                if( invalidImageVals().contains(dev.currentValue('image')?.toString()) ) { return }
                if((it.name == "image"))
                {
                    if(it.getUnixTime() > time)
                    {
                        time = it.getUnixTime()
                        latestDev = dev
                    }
                }
            }
        }
        
        // Fail-safe -- if events have aged out, just use the first device.
        //     This feels like a bug in the Hubitat Device.events() API
        if(null == latestDev) { latestDev = sourceDevs?.getAt(0) }
        
        return render(renderImageMap(latestDev))
    }
    catch (Exception e)
    {
        return render(contentType: "text/html", data: "Image Server: ${e.message}", status: 200) 
    }    
}

def invalidImageVals()
{
    // "n/a" is the default state after clearImages()
    return [null, "n/a"]
}

def renderImageMap(dev)
{
    def imageArr = getImageAttr(dev)
    if(null == imageArr)
    {
        // the file was deleted, or something
        throw new Exception("image missing")
    }
    
    return [contentType: "image/jpeg;base64", data: imageArr, status: 200]
}

def getImageAttr(dev)
{
    def image = dev.currentValue('image')
    
    if(invalidImageVals().contains(image.toString()))
    {        
        throw new Exception("no image present")
    }
    
    if(image?.contains("file:"))
    {
        // new-style images are stored in the File Manager
        //   and the 'image' attribute is "file:" plus the fileName
        def fileName = image.split("file:")?.getAt(1)
        try
        {
            image = downloadHubFile(fileName)
        }
        catch(java.nio.file.NoSuchFileException e)
        {
            // file is missing, even though the 'image' attr said it was there
            return null
        }
        catch(groovy.lang.MissingMethodException e)
        {
            if(e.message.contains("downloadHubFile"))
            {
                // file I/O APIs were added in 2.3.4.132
                def errMsg = "Your camera driver indicates this image is stored in the file manager."
                errMsg += "  You must update your Hubitat software to at least version 2.3.4.132."  
                log.error errMsg
            }
            else { logDebug e }
            
            return null
        }
        catch(e)
        {
            logDebug e
            return null
        }
    }
    else
    {
        // old-style images are stored as a hex string, so convert to byte[] before returning
        image = hubitat.helper.HexUtils.hexStringToByteArray(image)
    }
    
    return image    
}

def notificationHandler(evt)
{
    def dev = evt.getDevice()
    def title = evt.getDisplayName()
    def date = evt.getDate()
    
    if(dev.currentValue('image') != "n/a")
    {
        logDebug("new image on device: ${dev}")
        pushoverNotification(dev, title, "New image: ${date}")
    }
}

def pushoverNotification(dev, String title = "", String message = "New Image")
{
    if([poUserKey, poApiToken, dev].contains(null))
    {
        logDebug("missing Pushover credentials or device")
        return
    }
    
    def imageArr = getImageAttr(dev)
    
    // thanks!
    //  below code was referenced from Younes at https://community.hubitat.com/t/solved-pushover-notification-with-image/102299
    
    //Top Part of the POST request Body
    def postBodyTop = 
        """----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="user"\r\n\r\n${poUserKey}\r\n----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="token"\r\n\r\n${poApiToken}\r\n----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="title"\r\n\r\n${title}\r\n----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="message"\r\n\r\n${message}\r\n----rjtvk266t3df6jkpb4\r\nContent-Disposition: form-data; 
        name="attachment"; filename="image.jpg"\r\nContent-Type: image/jpeg\r\n\r\n"""

    //Bottom Part of the POST request Body
    def postBodyBottom = """\r\n----rjtvk266t3df6jkpb4--"""
    
    try
    {
        byte[] postBodyTopArr = postBodyTop.getBytes("UTF-8")
        byte[] postBodyBottomArr = postBodyBottom.getBytes("UTF-8")
        
        //Combine different parts of the POST request body
        ByteArrayOutputStream postBodyOutputStream = new ByteArrayOutputStream();
        
        postBodyOutputStream.write(postBodyTopArr);
        postBodyOutputStream.write(imageArr);
        postBodyOutputStream.write(postBodyBottomArr);
        
        byte[] postBody = postBodyOutputStream.toByteArray();
        
        //Build HTTP Request Parameters
        def params =
        [
            requestContentType: "application/octet-stream",
            headers: ["content-type": "multipart/form-data; boundary=--rjtvk266t3df6jkpb4"],
            uri: "https://api.pushover.net/1/messages.json",
            body: postBody
        ]
        
        httpPost(params)
        { resp ->
            if(resp.status != 200)
            {
                throw new Exception("HTTP error: ${resp.status}")
            }
        }
    }
    catch(Exception e)
    {
        log.error "pushoverNotification error: ${e.message}"
    }
}

def findDevByDniOrName(devs, idValue)
{
    if(!idValue) { return }
    
    idValue = java.net.URLDecoder.decode(idValue)
    
    // check for matching DNI first and return if so...
    def dev = devs?.find { it.getDeviceNetworkId()?.toString() == idValue }
    if(dev) { return dev }
    
    // ...if not, then check whether either name or label matches
    // note that this would be first found, since only DNI is globally unique
    dev = devs?.find { [it.getName(), it.getLabel()].contains(idValue) }
    
    return dev
}

def notifyOnDemand()
{
    logDebug("notifyOnDemand(): ${params}")
    
    // only dni/name is absolutely required
    if(!params.devDniOrName) { throw new Exception("must specify device name or DNI") }    
    
    // remove URL decoding from these others, if they exist
    if(params.title) { params.title = java.net.URLDecoder.decode(params.title) }
    if(params.message) { params.message = java.net.URLDecoder.decode(params.message) }
    
    log.debug params
    
    try
    {
        def dev = findDevByDniOrName(pushoverDevsOnDemand, params.devDniOrName)
        if(!dev) { throw new Exception("no matching device") }

        pushoverNotification(dev, params.title ?: (dev.getLabel() ?: dev.getName()), params.message ?: "New image: ${new Date().toString()}")
    }    
    catch (Exception e)
    {
        return render(contentType: "text/html", data: "Image Server: ${e.message}", status: 200) 
    }
}
